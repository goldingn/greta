# NOTE: This workflow is overkill for most R packages
# check-standard.yaml is likely a better choice
# usethis::use_github_action("check-standard") will install it.
#
# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: windows-latest, r: '3.6'}
          - {os: ubuntu-18.04,   r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest", http-user-agent: "R/4.0.0 (ubuntu-18.04) R (4.0.0 x86_64-pc-linux-gnu x86_64 linux-gnu) on GitHub Actions" }
          - {os: ubuntu-18.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04,   r: 'oldrel',  rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04,   r: '3.5',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04,   r: '3.4',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04,   r: '3.3',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}

    env:
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RETICULATE_AUTOCONFIGURE: 'FALSE'
      UPGRADE_PKGS: runner.r != "3.[3-5]"

    steps:

      # - if: runner.r == "3.[3-5]"
      #    env:
      #      UPGRADE_PKGS: FALSE

      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        id: install-r
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: install mvtnorm and mcmcpack for R < 3.6
        if: ${{ !env.UPGRADE_PKGS}}
        run: |
          install.packages("remotes")
          remotes::install_version(package = "MCMCpack", version = "1.4-4")
          remotes::install_version(package = "mvtnorm", version = "1.0-8")
        shell: RScript {0}

      - name: Install pak and query dependencies
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          saveRDS(pak::pkg_deps("local::.", upgrade = ${{ env.UPGRADE_PKGS }}, dependencies = TRUE), ".github/r-depends.rds")
        shell: RScript {0}

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.R_LIBS_USER }}/*
            !${{ env.R_LIBS_USER }}/pak
          key: ${{ matrix.config.os }}-${{ steps.install-r.outputs.installed-r-version }}-1-${{ hashFiles('.github/r-depends.rds') }}
          restore-keys: ${{ matrix.config.os }}-${{ steps.install-r.outputs.installed-r-version }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          Rscript -e "pak::local_system_requirements(execute = TRUE)"
          Rscript -e "pak::pkg_system_requirements('rcmdcheck', execute = TRUE)"

      - name: Install R package dependencies
        run: |
          pak::local_install_dev_deps(upgrade = TRUE)
          pak::pkg_install("rcmdcheck")
        shell: Rscript {0}

      - name: Install Miniconda
        run: |
          install.packages("remotes")
          remotes::install_cran('reticulate')
          reticulate::install_miniconda()
        shell: Rscript {0}

      - name: Set options for conda binary for macOS
        if: runner.os == 'macOS'
        run: |
          echo "options(reticulate.conda_binary = reticulate:::miniconda_conda())" >> .Rprofile

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --user numpy
          pip install --user scipy
          pip install --user 'tensorflow==1.14'
          pip install --user 'tensorflow-probability==0.7.0'

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", '--no-multiarch'), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.config.os }}-r${{ matrix.config.r }}-results
          path: check

      # - name: download system packages
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt-get install libmagick++-dev
      #     sudo apt-get install wget
      #     sudo apt-get install libatlas3gf-base
      #     sudo apt-get install libatlas-dev
      #     sudo apt-get install python-joblib
      #     sudo apt-get install libv8-dev

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.6
